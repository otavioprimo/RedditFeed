/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
import * as import0 from 'ionic-angular/components/refresher/refresher';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
export var Wrapper_Refresher = (function () {
    function Wrapper_Refresher(p0, p1, p2) {
        this.changed = false;
        this._pullMin = import1.UNINITIALIZED;
        this._pullMax = import1.UNINITIALIZED;
        this._closeDuration = import1.UNINITIALIZED;
        this._snapbackDuration = import1.UNINITIALIZED;
        this._enabled = import1.UNINITIALIZED;
        this.context = new import0.Refresher(p0, p1, p2);
    }
    Wrapper_Refresher.prototype.check_pullMin = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pullMin, currValue))) {
            this.changed = true;
            this.context.pullMin = currValue;
            this._pullMin = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_pullMax = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pullMax, currValue))) {
            this.changed = true;
            this.context.pullMax = currValue;
            this._pullMax = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_closeDuration = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._closeDuration, currValue))) {
            this.changed = true;
            this.context.closeDuration = currValue;
            this._closeDuration = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_snapbackDuration = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._snapbackDuration, currValue))) {
            this.changed = true;
            this.context.snapbackDuration = currValue;
            this._snapbackDuration = currValue;
        }
    };
    Wrapper_Refresher.prototype.check_enabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._enabled, currValue))) {
            this.changed = true;
            this.context.enabled = currValue;
            this._enabled = currValue;
        }
    };
    Wrapper_Refresher.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    return Wrapper_Refresher;
}());
//# sourceMappingURL=refresher.ngfactory.js.map