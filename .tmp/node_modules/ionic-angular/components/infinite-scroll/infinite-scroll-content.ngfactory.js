/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from 'ionic-angular/components/infinite-scroll/infinite-scroll-content';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/components/infinite-scroll/infinite-scroll';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import13 from '@angular/core/src/linker/template_ref';
import * as import14 from '@angular/common/src/directives/ng_if';
import * as import15 from '../spinner/spinner.ngfactory';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from 'ionic-angular/components/spinner/spinner';
import * as import18 from '@angular/core/src/security';
export var Wrapper_InfiniteScrollContent = (function () {
    function Wrapper_InfiniteScrollContent(p0, p1) {
        this.changed = false;
        this._loadingSpinner = import1.UNINITIALIZED;
        this._loadingText = import1.UNINITIALIZED;
        this.context = new import0.InfiniteScrollContent(p0, p1);
    }
    Wrapper_InfiniteScrollContent.prototype.check_loadingSpinner = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._loadingSpinner, currValue))) {
            this.changed = true;
            this.context.loadingSpinner = currValue;
            this._loadingSpinner = currValue;
        }
    };
    Wrapper_InfiniteScrollContent.prototype.check_loadingText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._loadingText, currValue))) {
            this.changed = true;
            this.context.loadingText = currValue;
            this._loadingText = currValue;
        }
    };
    Wrapper_InfiniteScrollContent.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    return Wrapper_InfiniteScrollContent;
}());
var renderType_InfiniteScrollContent_Host = null;
var _View_InfiniteScrollContent_Host0 = (function (_super) {
    __extends(_View_InfiniteScrollContent_Host0, _super);
    function _View_InfiniteScrollContent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_InfiniteScrollContent_Host0, renderType_InfiniteScrollContent_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_InfiniteScrollContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-infinite-scroll-content', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_InfiniteScrollContent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._InfiniteScrollContent_0_4 = new Wrapper_InfiniteScrollContent(this.parentInjector.get(import8.InfiniteScroll), this.parentInjector.get(import9.Config));
        this._appEl_0.initComponent(this._InfiniteScrollContent_0_4.context, [], compView_0);
        compView_0.create(this._InfiniteScrollContent_0_4.context, this.projectableNodes, null);
        this._expr_0 = import1.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_InfiniteScrollContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.InfiniteScrollContent) && (0 === requestNodeIndex))) {
            return this._InfiniteScrollContent_0_4.context;
        }
        return notFoundResult;
    };
    _View_InfiniteScrollContent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._InfiniteScrollContent_0_4.detectChangesInternal(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._InfiniteScrollContent_0_4.context.inf.state;
        if (import2.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementAttribute(this._el_0, 'state', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_InfiniteScrollContent_Host0;
}(import3.AppView));
function viewFactory_InfiniteScrollContent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_InfiniteScrollContent_Host === null)) {
        (renderType_InfiniteScrollContent_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_InfiniteScrollContent_Host0(viewUtils, parentInjector, declarationEl);
}
export var InfiniteScrollContentNgFactory = new import11.ComponentFactory('ion-infinite-scroll-content', viewFactory_InfiniteScrollContent_Host0, import0.InfiniteScrollContent);
var styles_InfiniteScrollContent = [];
var renderType_InfiniteScrollContent = null;
var _View_InfiniteScrollContent0 = (function (_super) {
    __extends(_View_InfiniteScrollContent0, _super);
    function _View_InfiniteScrollContent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_InfiniteScrollContent0, renderType_InfiniteScrollContent, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_InfiniteScrollContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'infinite-loading');
        this._anchor_1 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_1 = new import5.AppElement(1, 0, this, this._anchor_1);
        this._TemplateRef_1_5 = new import13.TemplateRef_(this._appEl_1, viewFactory_InfiniteScrollContent1);
        this._NgIf_1_6 = new import12.Wrapper_NgIf(this._appEl_1.vcRef, this._TemplateRef_1_5);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_2 = new import5.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import13.TemplateRef_(this._appEl_2, viewFactory_InfiniteScrollContent2);
        this._NgIf_2_6 = new import12.Wrapper_NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this.init([], [
            this._el_0,
            this._anchor_1,
            this._anchor_2
        ], [], []);
        return null;
    };
    _View_InfiniteScrollContent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_5;
        }
        if (((token === import14.NgIf) && (1 === requestNodeIndex))) {
            return this._NgIf_1_6.context;
        }
        if (((token === import13.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import14.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        return notFoundResult;
    };
    _View_InfiniteScrollContent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.context.loadingSpinner;
        this._NgIf_1_6.check_ngIf(currVal_0, throwOnChange, false);
        this._NgIf_1_6.detectChangesInternal(this, this._anchor_1, throwOnChange);
        var currVal_1 = this.context.loadingText;
        this._NgIf_2_6.check_ngIf(currVal_1, throwOnChange, false);
        this._NgIf_2_6.detectChangesInternal(this, this._anchor_2, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_InfiniteScrollContent0;
}(import3.AppView));
export function viewFactory_InfiniteScrollContent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_InfiniteScrollContent === null)) {
        (renderType_InfiniteScrollContent = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, styles_InfiniteScrollContent, {}));
    }
    return new _View_InfiniteScrollContent0(viewUtils, parentInjector, declarationEl);
}
var _View_InfiniteScrollContent1 = (function (_super) {
    __extends(_View_InfiniteScrollContent1, _super);
    function _View_InfiniteScrollContent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_InfiniteScrollContent1, renderType_InfiniteScrollContent, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_InfiniteScrollContent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'infinite-loading-spinner');
        this._el_1 = this.renderer.createElement(this._el_0, 'ion-spinner', null);
        this._appEl_1 = new import5.AppElement(1, 0, this, this._el_1);
        var compView_1 = import15.viewFactory_Spinner0(this.viewUtils, this.injector(1), this._appEl_1);
        this._Spinner_1_4 = new import15.Wrapper_Spinner(this.parent.parentInjector.get(import9.Config), new import16.ElementRef(this._el_1), this.renderer);
        this._appEl_1.initComponent(this._Spinner_1_4.context, [], compView_1);
        compView_1.create(this._Spinner_1_4.context, [], null);
        this._expr_1 = import1.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._el_1
        ], [], []);
        return null;
    };
    _View_InfiniteScrollContent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.Spinner) && (1 === requestNodeIndex))) {
            return this._Spinner_1_4.context;
        }
        return notFoundResult;
    };
    _View_InfiniteScrollContent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.parent.context.loadingSpinner;
        this._Spinner_1_4.check_name(currVal_0, throwOnChange, false);
        if (this._Spinner_1_4.detectChangesInternal(this, this._el_1, throwOnChange)) {
            this._appEl_1.componentView.markAsCheckOnce();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_1 = this._Spinner_1_4.context.paused;
        if (import2.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_1, 'spinner-paused', currVal_1);
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_InfiniteScrollContent1;
}(import3.AppView));
function viewFactory_InfiniteScrollContent1(viewUtils, parentInjector, declarationEl) {
    return new _View_InfiniteScrollContent1(viewUtils, parentInjector, declarationEl);
}
var _View_InfiniteScrollContent2 = (function (_super) {
    __extends(_View_InfiniteScrollContent2, _super);
    function _View_InfiniteScrollContent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_InfiniteScrollContent2, renderType_InfiniteScrollContent, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_InfiniteScrollContent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'infinite-loading-text');
        this._expr_0 = import1.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return null;
    };
    _View_InfiniteScrollContent2.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.parent.context.loadingText;
        if (import2.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementProperty(this._el_0, 'innerHTML', this.viewUtils.sanitizer.sanitize(import18.SecurityContext.HTML, currVal_0));
            this._expr_0 = currVal_0;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_InfiniteScrollContent2;
}(import3.AppView));
function viewFactory_InfiniteScrollContent2(viewUtils, parentInjector, declarationEl) {
    return new _View_InfiniteScrollContent2(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=infinite-scroll-content.ngfactory.js.map