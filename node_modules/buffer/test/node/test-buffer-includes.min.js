"use strict";var Buffer=require("../../").Buffer,assert=require("assert"),Buffer=require("../../").Buffer,b=Buffer.from("abcdef"),buf_a=Buffer.from("a"),buf_bc=Buffer.from("bc"),buf_f=Buffer.from("f"),buf_z=Buffer.from("z"),buf_empty=Buffer.from("");assert(b.includes("a")),assert(!b.includes("a",1)),assert(!b.includes("a",-1)),assert(!b.includes("a",-4)),assert(b.includes("a",-b.length)),assert(b.includes("a",NaN)),assert(b.includes("a",-(1/0))),assert(!b.includes("a",1/0)),assert(b.includes("bc")),assert(!b.includes("bc",2)),assert(!b.includes("bc",-1)),assert(!b.includes("bc",-3)),assert(b.includes("bc",-5)),assert(b.includes("bc",NaN)),assert(b.includes("bc",-(1/0))),assert(!b.includes("bc",1/0)),assert(b.includes("f"),b.length-1),assert(!b.includes("z")),assert(!b.includes("")),assert(!b.includes("",1)),assert(!b.includes("",b.length+1)),assert(!b.includes("",1/0)),assert(b.includes(buf_a)),assert(!b.includes(buf_a,1)),assert(!b.includes(buf_a,-1)),assert(!b.includes(buf_a,-4)),assert(b.includes(buf_a,-b.length)),assert(b.includes(buf_a,NaN)),assert(b.includes(buf_a,-(1/0))),assert(!b.includes(buf_a,1/0)),assert(b.includes(buf_bc)),assert(!b.includes(buf_bc,2)),assert(!b.includes(buf_bc,-1)),assert(!b.includes(buf_bc,-3)),assert(b.includes(buf_bc,-5)),assert(b.includes(buf_bc,NaN)),assert(b.includes(buf_bc,-(1/0))),assert(!b.includes(buf_bc,1/0)),assert(b.includes(buf_f),b.length-1),assert(!b.includes(buf_z)),assert(!b.includes(buf_empty)),assert(!b.includes(buf_empty,1)),assert(!b.includes(buf_empty,b.length+1)),assert(!b.includes(buf_empty,1/0)),assert(b.includes(97)),assert(!b.includes(97,1)),assert(!b.includes(97,-1)),assert(!b.includes(97,-4)),assert(b.includes(97,-b.length)),assert(b.includes(97,NaN)),assert(b.includes(97,-(1/0))),assert(!b.includes(97,1/0)),assert(!b.includes(0)),assert(b.includes("d",2)),assert(b.includes("f",5)),assert(b.includes("f",-1)),assert(!b.includes("f",6)),assert(b.includes(Buffer.from("d"),2)),assert(b.includes(Buffer.from("f"),5)),assert(b.includes(Buffer.from("f"),-1)),assert(!b.includes(Buffer.from("f"),6)),assert(!Buffer.from("ff").includes(Buffer.from("f"),1,"ucs2")),assert.strictEqual(Buffer.from(b.toString("hex"),"hex").includes("64",0,"hex"),!0),assert.strictEqual(Buffer.from(b.toString("hex"),"hex").includes(Buffer.from("64","hex"),0,"hex"),!0),assert.strictEqual(Buffer.from(b.toString("base64"),"base64").includes("ZA==",0,"base64"),!0),assert.strictEqual(Buffer.from(b.toString("base64"),"base64").includes(Buffer.from("ZA==","base64"),0,"base64"),!0),assert.strictEqual(Buffer.from(b.toString("ascii"),"ascii").includes("d",0,"ascii"),!0),assert.strictEqual(Buffer.from(b.toString("ascii"),"ascii").includes(Buffer.from("d","ascii"),0,"ascii"),!0),assert.strictEqual(Buffer.from(b.toString("latin1"),"latin1").includes("d",0,"latin1"),!0),assert.strictEqual(Buffer.from(b.toString("latin1"),"latin1").includes(Buffer.from("d","latin1"),0,"latin1"),!0),assert.strictEqual(Buffer.from(b.toString("binary"),"binary").includes("d",0,"binary"),!0),assert.strictEqual(Buffer.from(b.toString("binary"),"binary").includes(Buffer.from("d","binary"),0,"binary"),!0);var twoByteString=Buffer.from("ΚΑΣΣΕ","ucs2");assert(twoByteString.includes("Ε",4,"ucs2")),assert(twoByteString.includes("Σ",-4,"ucs2")),assert(twoByteString.includes("Σ",-6,"ucs2")),assert(twoByteString.includes(Buffer.from("Σ","ucs2"),-6,"ucs2")),assert(!twoByteString.includes("Σ",-2,"ucs2"));var mixedByteStringUcs2=Buffer.from("ΚΑabcΣΣΕ","ucs2");assert(mixedByteStringUcs2.includes("bc",0,"ucs2")),assert(mixedByteStringUcs2.includes("Σ",0,"ucs2")),assert(!mixedByteStringUcs2.includes("Ζ",0,"ucs2")),assert(6,mixedByteStringUcs2.includes(Buffer.from("bc","ucs2"),0,"ucs2")),assert(10,mixedByteStringUcs2.includes(Buffer.from("Σ","ucs2"),0,"ucs2")),assert(-1,mixedByteStringUcs2.includes(Buffer.from("Ζ","ucs2"),0,"ucs2")),twoByteString=Buffer.from("ΚΑΣΣΕ","ucs2"),assert(twoByteString.includes("Κ",0,"ucs2")),assert(twoByteString.includes("Α",0,"ucs2"),"Alpha"),assert(twoByteString.includes("Σ",0,"ucs2"),"First Sigma"),assert(twoByteString.includes("Σ",6,"ucs2"),"Second Sigma"),assert(twoByteString.includes("Ε",0,"ucs2"),"Epsilon"),assert(!twoByteString.includes("Β",0,"ucs2"),"Not beta"),assert(twoByteString.includes("ΚΑ",0,"ucs2"),"Lambda Alpha"),assert(twoByteString.includes("ΑΣ",0,"ucs2"),"Alpha Sigma"),assert(twoByteString.includes("ΣΣ",0,"ucs2"),"Sigma Sigma"),assert(twoByteString.includes("ΣΕ",0,"ucs2"),"Sigma Epsilon");var mixedByteStringUtf8=Buffer.from("ΚΑabcΣΣΕ");assert(mixedByteStringUtf8.includes("bc")),assert(mixedByteStringUtf8.includes("bc",5)),assert(mixedByteStringUtf8.includes("bc",-8)),assert(mixedByteStringUtf8.includes("Σ")),assert(!mixedByteStringUtf8.includes("Ζ"));for(var longString="A",i=66;76>i;i++)longString=longString+String.fromCharCode(i)+longString;for(var longBufferString=Buffer.from(longString),pattern="ABACABADABACABA",i=0;i<longBufferString.length-pattern.length;i+=7){var includes=longBufferString.includes(pattern,i);assert(includes,"Long ABACABA...-string at index "+i)}assert(longBufferString.includes("AJABACA"),"Long AJABACA, First J"),assert(longBufferString.includes("AJABACA",511),"Long AJABACA, Second J"),pattern="JABACABADABACABA",assert(longBufferString.includes(pattern),"Long JABACABA..., First J"),assert(longBufferString.includes(pattern,512),"Long JABACABA..., Second J");var asciiString=Buffer.from("arglebargleglopglyfarglebargleglopglyfarglebargleglopglyf");assert(!asciiString.includes(" 61")),assert(asciiString.includes("leb",0));for(var allCodePoints=[],i=0;65536>i;i++)allCodePoints[i]=i;var allCharsString=String.fromCharCode.apply(String,allCodePoints),allCharsBufferUtf8=Buffer.from(allCharsString),allCharsBufferUcs2=Buffer.from(allCharsString,"ucs2");assert(!allCharsBufferUtf8.includes("notfound")),assert(!allCharsBufferUcs2.includes("notfound"));for(var lengths=[1,3,15],indices=[5,96,1024,1664,2030,65282,91664,194427],lengthIndex=0;lengthIndex<lengths.length;lengthIndex++)for(var i=0;i<indices.length;i++){var index=indices[i],length=lengths[lengthIndex];index+length>127&&(length=2*length),index+length>2047&&(length=3*length),index+length>65535&&(length=4*length);var patternBufferUtf8=allCharsBufferUtf8.slice(index,index+length);assert(index,allCharsBufferUtf8.includes(patternBufferUtf8));var patternStringUtf8=patternBufferUtf8.toString();assert(index,allCharsBufferUtf8.includes(patternStringUtf8))}lengths=[2,4,16],indices=[5,101,261,517,645,8197,8325,65520];for(var lengthIndex=0;lengthIndex<lengths.length;lengthIndex++)for(var i=0;i<indices.length;i++){var index=2*indices[i],length=lengths[lengthIndex],patternBufferUcs2=allCharsBufferUcs2.slice(index,index+length);assert(index,allCharsBufferUcs2.includes(patternBufferUcs2,0,"ucs2"));var patternStringUcs2=patternBufferUcs2.toString("ucs2");assert(index,allCharsBufferUcs2.includes(patternStringUcs2,0,"ucs2"))}assert["throws"](function(){b.includes(function(){})}),assert["throws"](function(){b.includes({})}),assert["throws"](function(){b.includes([])});var buf=Buffer.from("this is a test");assert.ok(buf.includes(26995)),assert.ok(buf.includes(6910752)),assert.ok(buf.includes(1769152617)),assert.ok(buf.includes(0x697374657374)),assert.ok(buf.includes(1769173876)),assert.ok(buf.includes(1769174117)),assert.ok(buf.includes(1769174117)),assert.ok(buf.includes(-140)),assert.ok(buf.includes(-152)),assert.ok(!buf.includes(255)),assert.ok(!buf.includes(65535));