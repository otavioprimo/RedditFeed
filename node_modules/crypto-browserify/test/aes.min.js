function runIt(e){crypto.listCiphers().forEach(function(t){test("run: "+e,function(e){e.test("ciphers: "+t,function(e){e.plan(1);var r=randomBytes(562),n=randomBytes(20),i=crypto.createCipher(t,n),a=crypto.createDecipher(t,n),o=[];o.push(a.update(i.update(r))),o.push(a.update(i["final"]())),t.indexOf("gcm")>-1&&a.setAuthTag(i.getAuthTag()),o.push(a["final"]()),e.equals(r.toString("hex"),Buffer.concat(o).toString("hex"))})})}),4>e&&setTimeout(runIt,0,e+1)}var test=require("tape"),crypto=require("browserify-cipher/browser"),randomBytes=require("pseudorandombytes");runIt(1),test("getCiphers",function(e){e.plan(1),e.ok(crypto.getCiphers().length,"get ciphers returns an array")}),test("through crypto browserify works",function(e){e.plan(2);var t=require("../"),r="aes-128-ctr",n=randomBytes(562),i=randomBytes(20),a=t.createCipher(r,i),o=t.createDecipher(r,i),s=[];s.push(o.update(a.update(n))),s.push(o.update(a["final"]())),s.push(o["final"]()),e.equals(n.toString("hex"),Buffer.concat(s).toString("hex")),e.ok(t.getCiphers().length,"get ciphers returns an array")});