function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(t){return"function"==typeof t}function isNumber(t){return"number"==typeof t}function isObject(t){return"object"==typeof t&&null!==t}function isUndefined(t){return void 0===t}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(t){if(!isNumber(t)||0>t||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},EventEmitter.prototype.emit=function(t){var e,n,r,i,o,s;if(this._events||(this._events={}),"error"===t&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(e=arguments[1],e instanceof Error)throw e;var a=new Error('Uncaught, unspecified "error" event. ('+e+")");throw a.context=e,a}if(n=this._events[t],isUndefined(n))return!1;if(isFunction(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(isObject(n))for(i=Array.prototype.slice.call(arguments,1),s=n.slice(),r=s.length,o=0;r>o;o++)s[o].apply(this,i);return!0},EventEmitter.prototype.addListener=function(t,e){var n;if(!isFunction(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,isFunction(e.listener)?e.listener:e),this._events[t]?isObject(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,isObject(this._events[t])&&!this._events[t].warned&&(n=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[t].length>n&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace())),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(t,e){function r(){this.removeListener(t,r),n||(n=!0,e.apply(this,arguments))}if(!isFunction(e))throw TypeError("listener must be a function");var n=!1;return r.listener=e,this.on(t,r),this},EventEmitter.prototype.removeListener=function(t,e){var n,r,i,o;if(!isFunction(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(n=this._events[t],i=n.length,r=-1,n===e||isFunction(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(isObject(n)){for(o=i;o-->0;)if(n[o]===e||n[o].listener&&n[o].listener===e){r=o;break}if(0>r)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},EventEmitter.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[t],isFunction(n))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},EventEmitter.prototype.listeners=function(t){var e;return e=this._events&&this._events[t]?isFunction(this._events[t])?[this._events[t]]:this._events[t].slice():[]},EventEmitter.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(isFunction(e))return 1;if(e)return e.length}return 0},EventEmitter.listenerCount=function(t,e){return t.listenerCount(e)};