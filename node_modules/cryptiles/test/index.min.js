var Code=require("code"),Cryptiles=require(".."),Lab=require("lab"),internals={},lab=exports.lab=Lab.script(),describe=lab.describe,it=lab.it,expect=Code.expect;describe("randomString()",function(){it("should generate the right length string",function(e){for(var t=1;1e3>=t;++t)expect(Cryptiles.randomString(t).length).to.equal(t);e()}),it("returns an error on invalid bits size",function(e){expect(Cryptiles.randomString(1e20).message).to.match(/Failed generating random bits/),e()})}),describe("randomBits()",function(){it("returns an error on invalid input",function(e){expect(Cryptiles.randomBits(0).message).to.equal("Invalid random bits count"),e()})}),describe("fixedTimeComparison()",function(){var e=Cryptiles.randomString(5e4),t=Cryptiles.randomString(15e4);it("should take the same amount of time comparing different string sizes",function(r){var n=Date.now();Cryptiles.fixedTimeComparison(t,e);var i=Date.now()-n;n=Date.now(),Cryptiles.fixedTimeComparison(t,t);var a=Date.now()-n;expect(a-i).to.be.within(-20,20),r()}),it("should return true for equal strings",function(t){expect(Cryptiles.fixedTimeComparison(e,e)).to.equal(!0),t()}),it("should return false for different strings (size, a < b)",function(t){expect(Cryptiles.fixedTimeComparison(e,e+"x")).to.equal(!1),t()}),it("should return false for different strings (size, a > b)",function(t){expect(Cryptiles.fixedTimeComparison(e+"x",e)).to.equal(!1),t()}),it("should return false for different strings (size, a = b)",function(t){expect(Cryptiles.fixedTimeComparison(e+"x",e+"y")).to.equal(!1),t()}),it("should return false when not a string",function(e){expect(Cryptiles.fixedTimeComparison("x",null)).to.equal(!1),e()}),it("should return false when not a string (left)",function(e){expect(Cryptiles.fixedTimeComparison(null,"x")).to.equal(!1),e()})});