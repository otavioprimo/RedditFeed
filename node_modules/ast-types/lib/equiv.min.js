function astNodesAreEquivalent(e,t,r){return isArray.check(r)?r.length=0:r=null,areEquivalent(e,t,r)}function subscriptForProperty(e){return/[_$a-z][_$a-z0-9]*/i.test(e)?"."+e:"["+JSON.stringify(e)+"]"}function areEquivalent(e,t,r){return e===t?!0:isArray.check(e)?arraysAreEquivalent(e,t,r):isObject.check(e)?objectsAreEquivalent(e,t,r):isDate.check(e)?isDate.check(t)&&+e===+t:isRegExp.check(e)?isRegExp.check(t)&&e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.ignoreCase===t.ignoreCase:e==t}function arraysAreEquivalent(e,t,r){isArray.assert(e);var n=e.length;if(!isArray.check(t)||t.length!==n)return r&&r.push("length"),!1;for(var i=0;n>i;++i){if(r&&r.push(i),i in e!=i in t)return!1;if(!areEquivalent(e[i],t[i],r))return!1;if(r){var o=r.pop();if(o!==i)throw new Error(""+o)}}return!0}function objectsAreEquivalent(e,t,r){if(isObject.assert(e),!isObject.check(t))return!1;if(e.type!==t.type)return r&&r.push("type"),!1;var n=getFieldNames(e),i=n.length,o=getFieldNames(t),a=o.length;if(i===a){for(var s=0;i>s;++s){var u=n[s],l=getFieldValue(e,u),c=getFieldValue(t,u);if(r&&r.push(u),!areEquivalent(l,c,r))return!1;if(r){var f=r.pop();if(f!==u)throw new Error(""+f)}}return!0}if(!r)return!1;var p=Object.create(null);for(s=0;i>s;++s)p[n[s]]=!0;for(s=0;a>s;++s){if(u=o[s],!hasOwn.call(p,u))return r.push(u),!1;delete p[u]}for(u in p){r.push(u);break}return!1}var types=require("../main"),getFieldNames=types.getFieldNames,getFieldValue=types.getFieldValue,isArray=types.builtInTypes.array,isObject=types.builtInTypes.object,isDate=types.builtInTypes.Date,isRegExp=types.builtInTypes.RegExp,hasOwn=Object.prototype.hasOwnProperty;astNodesAreEquivalent.assert=function(e,t){var r=[];if(!astNodesAreEquivalent(e,t,r)){if(0!==r.length)throw new Error("Nodes differ in the following path: "+r.map(subscriptForProperty).join(""));if(e!==t)throw new Error("Nodes must be equal")}},module.exports=astNodesAreEquivalent;