function Arrayish(t){ArrayIndex.call(this,t),this.sets=Object.create(null)}function Foo(){ArrayIndex.call(this,5)}var ArrayIndex=require("./"),inherits=require("util").inherits,assert=require("assert");inherits(Arrayish,ArrayIndex);var a=new Arrayish(11);assert.equal(a.length,11),assert["throws"](function(){a[0]},/you must implement the `ArrayIndex.get` Symbol/),assert["throws"](function(){a[0]=0},/you must implement the `ArrayIndex.set` Symbol/),Arrayish.prototype[ArrayIndex.get]=function(t){return t in this.sets?+this.sets[t]*t:t},Arrayish.prototype[ArrayIndex.set]=function(t,e){this.sets[t]=e},assert.equal(0,a[0]),assert.equal(1,a[1]),assert.equal(2,a[2]),assert.equal(3,a[3]),assert.equal(4,a[4]),a[10]=1,assert.equal(10,a[10]),a[10]=2,assert.equal(20,a[10]),a[10]=3,assert.equal(30,a[10]),assert.equal(11,a.length),a[4]=20,a[6]=5.55432;var b=[0,1,2,3,80,5,33.325919999999996,7,8,9,30];assert.equal(JSON.stringify(b),JSON.stringify(a));var f=new Foo;assert["throws"](function(){f[0]}),assert["throws"](function(){f[0]=0}),f[ArrayIndex.get]=function(t){return 2*t},assert.equal(f[0],0),assert.equal(f[1],2),assert.equal(f[2],4),assert.equal(f[3],6),f[ArrayIndex.set]=function(t,e){this["foo"+t]=e},f[1]="bar",assert.equal(f.foo1,"bar");