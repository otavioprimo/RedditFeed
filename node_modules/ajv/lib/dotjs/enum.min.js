"use strict";module.exports=function(e,t){var l,h,r=" ",n=e.level,i=e.dataLevel,o=e.schema[t],s=e.schemaPath+"."+t,a=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(i||""),p="valid"+n,f=e.opts.v5&&o&&o.$data;f?(r+=" var schema"+n+" = "+e.util.getData(o.$data,i,e.dataPathArr)+"; ",h="schema"+n):h=o;var d="i"+n;f||(r+=" var schema"+n+" = validate.schema"+s+";"),r+="var "+p+";",f&&(r+=" if (schema"+n+" === undefined) "+p+" = true; else if (!Array.isArray(schema"+n+")) "+p+" = false; else {"),r+=""+p+" = false;for (var "+d+"=0; "+d+"<schema"+n+".length; "+d+"++) if (equal("+c+", schema"+n+"["+d+"])) { "+p+" = true; break; }",f&&(r+="  }  "),r+=" if (!"+p+") {   ";var v=v||[];v.push(r),r="",e.createErrors!==!1?(r+=" { keyword: '"+(l||"enum")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(a)+" , params: { allowedValues: schema"+n+" } ",e.opts.messages!==!1&&(r+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(r+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),r+=" } "):r+=" {} ";var m=r;return r=v.pop(),r+=!e.compositeRule&&u?e.async?" throw new ValidationError(["+m+"]); ":" validate.errors = ["+m+"]; return false; ":" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" }",u&&(r+=" else { "),r};