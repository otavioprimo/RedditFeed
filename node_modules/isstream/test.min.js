function test(t,e,n){tape("isStream("+e+")",function(r){r.plan(1),r.ok(t===isStream(n),e)})}function testReadable(t,e,n){tape("isReadable("+e+")",function(r){r.plan(1),r.ok(t===isReadable(n),e)})}function testWritable(t,e,n){tape("isWritable("+e+")",function(r){r.plan(1),r.ok(t===isWritable(n),e)})}function testDuplex(t,e,n){tape("isDuplex("+e+")",function(r){r.plan(1),r.ok(t===isDuplex(n),e)})}var tape=require("tape"),EE=require("events").EventEmitter,util=require("util"),isStream=require("./"),isReadable=require("./").isReadable,isWritable=require("./").isWritable,isDuplex=require("./").isDuplex,CoreStreams=require("stream"),ReadableStream10=require("./readable-stream-1.0/"),ReadableStream11=require("./readable-stream-1.1/");[void 0,null,"",!0,!1,0,1,1,"string",{},function(){}].forEach(function(t){test(!1,"non-stream / primitive: "+(JSON.stringify(t)||t&&t.toString()||t),t)}),test(!1,"fake stream obj",{pipe:function(){}}),function(){function t(){EE.call(this)}util.inherits(t,EE),t.prototype.pipe=function(){},t.Stream=t,test(!1,'fake stream "new Stream()"',new t)}(),test(!0,"CoreStreams.Stream",new CoreStreams.Stream),test(!0,"CoreStreams.Readable",new CoreStreams.Readable),test(!0,"CoreStreams.Writable",new CoreStreams.Writable),test(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),test(!0,"CoreStreams.Transform",new CoreStreams.Transform),test(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),test(!0,"ReadableStream10.Readable",new ReadableStream10.Readable),test(!0,"ReadableStream10.Writable",new ReadableStream10.Writable),test(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),test(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),test(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),test(!0,"ReadableStream11.Readable",new ReadableStream11.Readable),test(!0,"ReadableStream11.Writable",new ReadableStream11.Writable),test(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),test(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),test(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testReadable(!1,"CoreStreams.Stream",new CoreStreams.Stream),testReadable(!0,"CoreStreams.Readable",new CoreStreams.Readable),testReadable(!1,"CoreStreams.Writable",new CoreStreams.Writable),testReadable(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testReadable(!0,"CoreStreams.Transform",new CoreStreams.Transform),testReadable(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testReadable(!0,"ReadableStream10.Readable",new ReadableStream10.Readable),testReadable(!1,"ReadableStream10.Writable",new ReadableStream10.Writable),testReadable(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testReadable(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testReadable(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testReadable(!0,"ReadableStream11.Readable",new ReadableStream11.Readable),testReadable(!1,"ReadableStream11.Writable",new ReadableStream11.Writable),testReadable(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testReadable(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testReadable(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testWritable(!1,"CoreStreams.Stream",new CoreStreams.Stream),testWritable(!1,"CoreStreams.Readable",new CoreStreams.Readable),testWritable(!0,"CoreStreams.Writable",new CoreStreams.Writable),testWritable(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testWritable(!0,"CoreStreams.Transform",new CoreStreams.Transform),testWritable(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testWritable(!1,"ReadableStream10.Readable",new ReadableStream10.Readable),testWritable(!0,"ReadableStream10.Writable",new ReadableStream10.Writable),testWritable(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testWritable(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testWritable(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testWritable(!1,"ReadableStream11.Readable",new ReadableStream11.Readable),testWritable(!0,"ReadableStream11.Writable",new ReadableStream11.Writable),testWritable(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testWritable(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testWritable(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),testDuplex(!1,"CoreStreams.Stream",new CoreStreams.Stream),testDuplex(!1,"CoreStreams.Readable",new CoreStreams.Readable),testDuplex(!1,"CoreStreams.Writable",new CoreStreams.Writable),testDuplex(!0,"CoreStreams.Duplex",new CoreStreams.Duplex),testDuplex(!0,"CoreStreams.Transform",new CoreStreams.Transform),testDuplex(!0,"CoreStreams.PassThrough",new CoreStreams.PassThrough),testDuplex(!1,"ReadableStream10.Readable",new ReadableStream10.Readable),testDuplex(!1,"ReadableStream10.Writable",new ReadableStream10.Writable),testDuplex(!0,"ReadableStream10.Duplex",new ReadableStream10.Duplex),testDuplex(!0,"ReadableStream10.Transform",new ReadableStream10.Transform),testDuplex(!0,"ReadableStream10.PassThrough",new ReadableStream10.PassThrough),testDuplex(!1,"ReadableStream11.Readable",new ReadableStream11.Readable),testDuplex(!1,"ReadableStream11.Writable",new ReadableStream11.Writable),testDuplex(!0,"ReadableStream11.Duplex",new ReadableStream11.Duplex),testDuplex(!0,"ReadableStream11.Transform",new ReadableStream11.Transform),testDuplex(!0,"ReadableStream11.PassThrough",new ReadableStream11.PassThrough),[CoreStreams,ReadableStream10,ReadableStream11].forEach(function(t){["Stream","Readable","Writable","Duplex","Transform","PassThrough"].forEach(function(e){function n(){t[e].call(this)}t[e]&&(util.inherits(n,t[e]),test(!0,"Stream subclass: "+t.name+"."+e,new n))})});