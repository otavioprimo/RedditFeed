var assert=require("assert"),BN=require("../").BN;describe("BN.js/Utils",function(){describe(".toString()",function(){describe("binary padding",function(){it("should have a length of 256",function(){var e=new BN(0);assert.equal(e.toString(2,256).length,256)})}),describe("hex padding",function(){it("should have length of 8 from leading 15",function(){var e=new BN("ffb9602",16);assert.equal(e.toString("hex",2).length,8)}),it("should have length of 8 from leading zero",function(){var e=new BN("fb9604",16);assert.equal(e.toString("hex",8).length,8)}),it("should have length of 8 from leading zeros",function(){var e=new BN(0);assert.equal(e.toString("hex",8).length,8)}),it("should have length of 64 from leading 15",function(){var e=new BN("ffb96ff654e61130ba8422f0debca77a0ea74ae5ea8bca9b54ab64aabf01003",16);assert.equal(e.toString("hex",2).length,64)}),it("should have length of 64 from leading zero",function(){var e=new BN("fb96ff654e61130ba8422f0debca77a0ea74ae5ea8bca9b54ab64aabf01003",16);assert.equal(e.toString("hex",64).length,64)})})}),describe(".isNeg()",function(){it("should return true for negative numbers",function(){assert.equal(new BN(-1).isNeg(),!0),assert.equal(new BN(1).isNeg(),!1),assert.equal(new BN(0).isNeg(),!1),assert.equal(new BN("-0",10).isNeg(),!1)})}),describe(".isOdd()",function(){it("should return true for odd numbers",function(){assert.equal(new BN(0).isOdd(),!1),assert.equal(new BN(1).isOdd(),!0),assert.equal(new BN(2).isOdd(),!1),assert.equal(new BN("-0",10).isOdd(),!1),assert.equal(new BN("-1",10).isOdd(),!0),assert.equal(new BN("-2",10).isOdd(),!1)})}),describe(".isEven()",function(){it("should return true for even numbers",function(){assert.equal(new BN(0).isEven(),!0),assert.equal(new BN(1).isEven(),!1),assert.equal(new BN(2).isEven(),!0),assert.equal(new BN("-0",10).isEven(),!0),assert.equal(new BN("-1",10).isEven(),!1),assert.equal(new BN("-2",10).isEven(),!0)})}),describe(".isZero()",function(){it("should return true for zero",function(){assert.equal(new BN(0).isZero(),!0),assert.equal(new BN(1).isZero(),!1),assert.equal(new BN(4294967295).isZero(),!1)})}),describe(".bitLength()",function(){it("should return proper bitLength",function(){assert.equal(new BN(0).bitLength(),0),assert.equal(new BN(1).bitLength(),1),assert.equal(new BN(2).bitLength(),2),assert.equal(new BN(3).bitLength(),2),assert.equal(new BN(4).bitLength(),3),assert.equal(new BN(8).bitLength(),4),assert.equal(new BN(16).bitLength(),5),assert.equal(new BN(256).bitLength(),9),assert.equal(new BN(1193046).bitLength(),21),assert.equal(new BN("123456789",16).bitLength(),33),assert.equal(new BN("8023456789",16).bitLength(),40)})}),describe(".byteLength()",function(){it("should return proper byteLength",function(){assert.equal(new BN(0).byteLength(),0),assert.equal(new BN(1).byteLength(),1),assert.equal(new BN(2).byteLength(),1),assert.equal(new BN(3).byteLength(),1),assert.equal(new BN(4).byteLength(),1),assert.equal(new BN(8).byteLength(),1),assert.equal(new BN(16).byteLength(),1),assert.equal(new BN(256).byteLength(),2),assert.equal(new BN(1193046).byteLength(),3),assert.equal(new BN("123456789",16).byteLength(),5),assert.equal(new BN("8023456789",16).byteLength(),5)})}),describe(".toArray()",function(){it("should return [ 0 ] for `0`",function(){var e=new BN(0);assert.deepEqual(e.toArray("be"),[0]),assert.deepEqual(e.toArray("le"),[0])}),it("should zero pad to desired lengths",function(){var e=new BN(1193046);assert.deepEqual(e.toArray("be",5),[0,0,18,52,86]),assert.deepEqual(e.toArray("le",5),[86,52,18,0,0])}),it("should throw when naturally larger than desired length",function(){var e=new BN(1193046);assert["throws"](function(){e.toArray("be",2)},/^Error: byte array longer than desired length$/)})}),describe(".toBuffer",function(){it("should return proper Buffer",function(){var e=new BN(1193046);assert.deepEqual(e.toBuffer("be",5).toString("hex"),"0000123456"),assert.deepEqual(e.toBuffer("le",5).toString("hex"),"5634120000")})}),describe(".toNumber()",function(){it("should return proper Number if below the limit",function(){assert.deepEqual(new BN(1193046).toNumber(),1193046),assert.deepEqual(new BN(67108863).toNumber(),67108863),assert.deepEqual(new BN(67108864).toNumber(),67108864),assert.deepEqual(new BN(4503599627370496).toNumber(),4503599627370496),assert.deepEqual(new BN(4507997741006848).toNumber(),4507997741006848),assert.deepEqual(new BN(-1193046).toNumber(),-1193046),assert.deepEqual(new BN(-67108863).toNumber(),-67108863),assert.deepEqual(new BN(-67108864).toNumber(),-67108864),assert.deepEqual(new BN(-4503599627370496).toNumber(),-4503599627370496),assert.deepEqual(new BN(-4507997741006848).toNumber(),-4507997741006848)}),it("should throw when number exceeds 53 bits",function(){var e=new BN(1).iushln(54);assert["throws"](function(){e.toNumber()},/^Error: Number can only safely store up to 53 bits$/)})}),describe(".zeroBits()",function(){it("should return proper zeroBits",function(){assert.equal(new BN(0).zeroBits(),0),assert.equal(new BN(1).zeroBits(),0),assert.equal(new BN(2).zeroBits(),1),assert.equal(new BN(3).zeroBits(),0),assert.equal(new BN(4).zeroBits(),2),assert.equal(new BN(8).zeroBits(),3),assert.equal(new BN(16).zeroBits(),4),assert.equal(new BN(256).zeroBits(),8),assert.equal(new BN(16777216).zeroBits(),24),assert.equal(new BN(1193046).zeroBits(),1)})}),describe(".toJSON",function(){it("should return hex string",function(){assert.equal(new BN(291).toJSON(),"123")})}),describe(".cmpn",function(){it("should return -1, 0, 1 correctly",function(){assert.equal(new BN(42).cmpn(42),0),assert.equal(new BN(42).cmpn(43),-1),assert.equal(new BN(42).cmpn(41),1),assert.equal(new BN(67108862).cmpn(67108862),0),assert.equal(new BN(67108862).cmpn(67108863),-1),assert.equal(new BN(67108862).cmpn(67108861),1),assert["throws"](function(){new BN(67108862).cmpn(67108864)},/^Error: Number is too big$/),assert.equal(new BN(42).cmpn(-42),1),assert.equal(new BN(-42).cmpn(42),-1),assert.equal(new BN(-42).cmpn(-42),0),assert.equal(1/new BN(-42).cmpn(-42),1/0)})}),describe(".cmp",function(){it("should return -1, 0, 1 correctly",function(){assert.equal(new BN(42).cmp(new BN(42)),0),assert.equal(new BN(42).cmp(new BN(43)),-1),assert.equal(new BN(42).cmp(new BN(41)),1),assert.equal(new BN(67108862).cmp(new BN(67108862)),0),assert.equal(new BN(67108862).cmp(new BN(67108863)),-1),assert.equal(new BN(67108862).cmp(new BN(67108861)),1),assert.equal(new BN(67108862).cmp(new BN(67108864)),-1),assert.equal(new BN(42).cmp(new BN(-42)),1),assert.equal(new BN(-42).cmp(new BN(42)),-1),assert.equal(new BN(-42).cmp(new BN(-42)),0),assert.equal(1/new BN(-42).cmp(new BN(-42)),1/0)})}),describe("comparison shorthands",function(){it(".gtn greater than",function(){assert.equal(new BN(3).gtn(2),!0),assert.equal(new BN(3).gtn(3),!1),assert.equal(new BN(3).gtn(4),!1)}),it(".gt greater than",function(){assert.equal(new BN(3).gt(new BN(2)),!0),assert.equal(new BN(3).gt(new BN(3)),!1),assert.equal(new BN(3).gt(new BN(4)),!1)}),it(".gten greater than or equal",function(){assert.equal(new BN(3).gten(3),!0),assert.equal(new BN(3).gten(2),!0),assert.equal(new BN(3).gten(4),!1)}),it(".gte greater than or equal",function(){assert.equal(new BN(3).gte(new BN(3)),!0),assert.equal(new BN(3).gte(new BN(2)),!0),assert.equal(new BN(3).gte(new BN(4)),!1)}),it(".ltn less than",function(){assert.equal(new BN(2).ltn(3),!0),assert.equal(new BN(2).ltn(2),!1),assert.equal(new BN(2).ltn(1),!1)}),it(".lt less than",function(){assert.equal(new BN(2).lt(new BN(3)),!0),assert.equal(new BN(2).lt(new BN(2)),!1),assert.equal(new BN(2).lt(new BN(1)),!1)}),it(".lten less than or equal",function(){assert.equal(new BN(3).lten(3),!0),assert.equal(new BN(3).lten(2),!1),assert.equal(new BN(3).lten(4),!0)}),it(".lte less than or equal",function(){assert.equal(new BN(3).lte(new BN(3)),!0),assert.equal(new BN(3).lte(new BN(2)),!1),assert.equal(new BN(3).lte(new BN(4)),!0)}),it(".eqn equal",function(){assert.equal(new BN(3).eqn(3),!0),assert.equal(new BN(3).eqn(2),!1),assert.equal(new BN(3).eqn(4),!1)}),it(".eq equal",function(){assert.equal(new BN(3).eq(new BN(3)),!0),assert.equal(new BN(3).eq(new BN(2)),!1),assert.equal(new BN(3).eq(new BN(4)),!1)})}),describe(".fromTwos",function(){it("should convert from two's complement to negative number",function(){assert.equal(new BN("00000000",16).fromTwos(32).toNumber(),0),assert.equal(new BN("00000001",16).fromTwos(32).toNumber(),1),assert.equal(new BN("7fffffff",16).fromTwos(32).toNumber(),2147483647),assert.equal(new BN("80000000",16).fromTwos(32).toNumber(),-2147483648),assert.equal(new BN("f0000000",16).fromTwos(32).toNumber(),-268435456),assert.equal(new BN("f1234567",16).fromTwos(32).toNumber(),-249346713),assert.equal(new BN("ffffffff",16).fromTwos(32).toNumber(),-1),assert.equal(new BN("fffffffe",16).fromTwos(32).toNumber(),-2),assert.equal(new BN("fffffffffffffffffffffffffffffffe",16).fromTwos(128).toNumber(),-2),assert.equal(new BN("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe",16).fromTwos(256).toNumber(),-2),assert.equal(new BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16).fromTwos(256).toNumber(),-1),assert.equal(new BN("7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16).fromTwos(256).toString(10),new BN("57896044618658097711785492504343953926634992332820282019728792003956564819967",10).toString(10)),assert.equal(new BN("8000000000000000000000000000000000000000000000000000000000000000",16).fromTwos(256).toString(10),new BN("-57896044618658097711785492504343953926634992332820282019728792003956564819968",10).toString(10))})}),describe(".toTwos",function(){it("should convert from negative number to two's complement",function(){assert.equal(new BN(0).toTwos(32).toString(16),"0"),assert.equal(new BN(1).toTwos(32).toString(16),"1"),assert.equal(new BN(2147483647).toTwos(32).toString(16),"7fffffff"),assert.equal(new BN("-2147483648",10).toTwos(32).toString(16),"80000000"),assert.equal(new BN("-268435456",10).toTwos(32).toString(16),"f0000000"),assert.equal(new BN("-249346713",10).toTwos(32).toString(16),"f1234567"),assert.equal(new BN("-1",10).toTwos(32).toString(16),"ffffffff"),assert.equal(new BN("-2",10).toTwos(32).toString(16),"fffffffe"),assert.equal(new BN("-2",10).toTwos(128).toString(16),"fffffffffffffffffffffffffffffffe"),assert.equal(new BN("-2",10).toTwos(256).toString(16),"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"),assert.equal(new BN("-1",10).toTwos(256).toString(16),"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),assert.equal(new BN("57896044618658097711785492504343953926634992332820282019728792003956564819967",10).toTwos(256).toString(16),"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),assert.equal(new BN("-57896044618658097711785492504343953926634992332820282019728792003956564819968",10).toTwos(256).toString(16),"8000000000000000000000000000000000000000000000000000000000000000")})}),describe(".isBN",function(){it("should return true for BN",function(){assert.equal(BN.isBN(new BN),!0)}),it("should return false for everything else",function(){assert.equal(BN.isBN(1),!1),assert.equal(BN.isBN([]),!1),assert.equal(BN.isBN({}),!1)})})});