var assert=require("assert"),BN=require("../").BN;describe("BN.js/Reduction context",function(){function e(e,t){describe(e+" method",function(){it("should support add, iadd, sub, isub operations",function(){var e=new BN(257),r=t(e),n=new BN(123).toRed(r),i=new BN(231).toRed(r);assert.equal(n.redAdd(i).fromRed().toString(10),"97"),assert.equal(n.redSub(i).fromRed().toString(10),"149"),assert.equal(i.redSub(n).fromRed().toString(10),"108"),assert.equal(n.clone().redIAdd(i).fromRed().toString(10),"97"),assert.equal(n.clone().redISub(i).fromRed().toString(10),"149"),assert.equal(i.clone().redISub(n).fromRed().toString(10),"108")}),it("should support pow and mul operations",function(){var e=new BN("fffffffffffffffffffffffffffffffeffffffffffffffff",16),r=t(e),n=new BN(123),i=new BN(231),o=n.toRed(r).redMul(i.toRed(r)).fromRed();assert(0===o.cmp(n.mul(i).mod(e))),assert.equal(n.toRed(r).redPow(new BN(3)).fromRed().cmp(n.sqr().mul(n)),0),assert.equal(n.toRed(r).redPow(new BN(4)).fromRed().cmp(n.sqr().sqr()),0),assert.equal(n.toRed(r).redPow(new BN(8)).fromRed().cmp(n.sqr().sqr().sqr()),0),assert.equal(n.toRed(r).redPow(new BN(9)).fromRed().cmp(n.sqr().sqr().sqr().mul(n)),0),assert.equal(n.toRed(r).redPow(new BN(17)).fromRed().cmp(n.sqr().sqr().sqr().sqr().mul(n)),0),assert.equal(n.toRed(r).redPow(new BN("deadbeefabbadead",16)).fromRed().toString(16),"3aa0e7e304e320b68ef61592bcb00341866d6fa66e11a4d6")}),it("should sqrtm numbers",function(){var e=new BN(263),r=t(e),n=new BN(11).toRed(r),i=n.redSqrt();assert.equal(i.redSqr().cmp(n),0),i=n.redSqrt(),assert.equal(i.redSqr().cmp(n),0),e=new BN("fffffffffffffffffffffffffffffffeffffffffffffffff",16),r=t(e),n=new BN(13).toRed(r),i=n.redSqrt(!0,e),assert.equal(i.redSqr().cmp(n),0),i=n.redSqrt(!1,e),assert.equal(i.redSqr().cmp(n),0),e=new BN(13),r=t(e),n=new BN(10).toRed(r),assert.equal(n.redSqrt().fromRed().toString(10),"7")}),it("should invm numbers",function(){var e=new BN(257),r=t(e),n=new BN(3).toRed(r),i=n.redInvm();assert.equal(n.redMul(i).fromRed().toString(16),"1")}),it("should invm numbers (regression)",function(){var e=new BN("ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",16),r=new BN("e1d969b8192fbac73ea5b7921896d6a2263d4d4077bb8e5055361d1f7f8163f3",16),n=t(e);r=r.toRed(n),assert.equal(r.redInvm().fromRed().negative,0)}),it("should imul numbers",function(){var e=new BN("fffffffffffffffffffffffffffffffeffffffffffffffff",16),r=t(e),n=new BN("deadbeefabbadead",16),i=new BN("abbadeadbeefdead",16),o=n.mul(i).mod(e);assert.equal(n.toRed(r).redIMul(i.toRed(r)).fromRed().toString(16),o.toString(16))}),it("should pow(base, 0) == 1",function(){var e=new BN(256).toRed(BN.red("k256")),t=new BN(0),r=e.redPow(t);assert.equal(r.toString(),"1")}),it("should shl numbers",function(){var e=new BN(256).toRed(BN.red("k256")),t=e.redShl(1);assert.equal(t.toString(),"512")}),it("should reduce when converting to red",function(){var e=new BN(257),r=t(e),n=new BN(5).toRed(r);assert.doesNotThrow(function(){var e=n.redISub(new BN(512).toRed(r));e.redISub(new BN(512).toRed(r))})}),it("redNeg and zero value",function(){var e=new BN(0).toRed(BN.red("k256")).redNeg();assert.equal(e.isZero(),!0)}),it("should not allow modulus <= 1",function(){assert["throws"](function(){BN.red(new BN(0))},/^Error: modulus must be greater than 1$/),assert["throws"](function(){BN.red(new BN(1))},/^Error: modulus must be greater than 1$/),assert.doesNotThrow(function(){BN.red(new BN(2))})})})}e("Plain",BN.red),e("Montgomery",BN.mont),describe("Pseudo-Mersenne Primes",function(){it("should reduce numbers mod k256",function(){var e=BN._prime("k256");assert.equal(e.ireduce(new BN(57005)).toString(16),"dead"),assert.equal(e.ireduce(new BN("deadbeef",16)).toString(16),"deadbeef");var t=new BN("fedcba9876543210fedcba9876543210deadfedcba9876543210fedcba9876543210dead",16),r=t.mod(e.p).toString(16);assert.equal(e.ireduce(t).toString(16),r);var n=new BN("f7e46df64c1815962bf7bc9c561287983f4fcef9cb1979573163b477eab93959335dfb29ef07a4d835d22aa3b679776070a8b8f59ba73d56d01a79af9",16);r=n.mod(e.p).toString(16),assert.equal(e.ireduce(n).toString(16),r)}),it("should not fail to invm number mod k256",function(){var e=new BN("6c150c4aa9a8cf1934485d40674d4a7cd494675537bda36d49405c5d2c6f496f",16);e=e.toRed(BN.red("k256")),assert.equal(e.redInvm().redMul(e).fromRed().cmpn(1),0)}),it("should correctly square the number",function(){var e=BN._prime("k256").p,t=BN.red("k256"),r=new BN("9cd8cb48c3281596139f147c1364a3ede88d3f310fdb0eb98c924e599ca1b3c9",16),n=r.sqr().mod(e),i=r.toRed(t).redSqr().fromRed();assert.equal(i.toString(16),n.toString(16))}),it("redISqr should return right result",function(){var e=new BN("30f28939",16),t=e.toRed(BN.red("k256")).redISqr().fromRed();assert.equal(t.toString(16),"95bd93d19520eb1")})}),it("should avoid 4.1.0 regresion",function(){function e(e,t){var r=new BN(e),n=(e.length<<3)-t.bitLength();return n>0&&r.ishrn(n),r}var t=new Buffer("aff1651e4cd6036d57aa8b2a05ccf1a9d5a40166340ecbbdc55be10b568aa0aa3d05ce9a2fcec9df8ed018e29683c6051cb83e46ce31ba4edb045356a8d0d80b","hex"),r=new BN("5c7ff6b06f8f143fe8288433493e4769c4d988ace5be25a0e24809670716c613d7b0cee6932f8faa7c44d2cb24523da53fbe4f6ec3595892d1aa58c4328a06c46a15662e7eaa703a1decf8bbb2d05dbe2eb956c142a338661d10461c0d135472085057f3494309ffa73c611f78b32adbb5740c361c9f35be90997db2014e2ef5aa61782f52abeb8bd6432c4dd097bc5423b285dafb60dc364e8161f4a2a35aca3a10b1c4d203cc76a470a33afdcbdd92959859abd8b56e1725252d78eac66e71ba9ae3f1dd2487199874393cd4d832186800654760e1e34c09e4d155179f9ec0dc4473f996bdce6eed1cabed8b6f116f7ad9cf505df0f998e34ab27514b0ffe7",16),n=new BN("9db6fb5951b66bb6fe1e140f1d2ce5502374161fd6538df1648218642f0b5c48c8f7a41aadfa187324b87674fa1822b00f1ecf8136943d7c55757264e5a1a44ffe012e9936e00c1d3e9310b01c7d179805d3058b2a9f4bb6f9716bfe6117c6b5b3cc4d9be341104ad4a80ad6c94e005f4b993e14f091eb51743bf33050c38de235567e1b34c3d6a5c0ceaa1a0f368213c3d19843d0b4b09dcb9fc72d39c8de41f1bf14d4bb4563ca28371621cad3324b6a2d392145bebfac748805236f5ca2fe92b871cd8f9c36d3292b5509ca8caa77a2adfc7bfd77dda6f71125a7456fea153e433256a2261c6a06ed3693797e7995fad5aabbcfbe3eda2741e375404ae25b",16),i=new BN("f2c3119374ce76c9356990b465374a17f23f9ed35089bd969f61c6dde9998c1f",16),o=e(t,i),a="89ec4bb1400eccff8e7d9aa515cd1de7803f2daff09693ee7fd1353e90a68307",s=r.toRed(BN.mont(n)).redPow(o).fromRed().mod(i);assert.equal(s.toString(16),a)}),it("K256.split for 512 bits number should return equal numbers",function(){var e=BN.red("k256"),t=new BN(1).iushln(512).subn(1);assert.equal(t.bitLength(),512);var r=new BN(0);e.prime.split(t,r),assert.equal(t.cmp(r),0)})});