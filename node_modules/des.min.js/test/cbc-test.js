"use strict";var assert=require("assert"),crypto=require("crypto"),Buffer=require("buffer").Buffer,des=require("../"),fixtures=require("./fixtures"),bin=fixtures.bin;describe("DES-CBC",function(){var e=des.CBC.instantiate(des.DES);describe("encryption/decryption",function(){var t=[{key:"133457799bbcdff1",iv:"0102030405060708",input:"0123456789abcdef"},{key:"0000000000000000",iv:"ffffffffffffffff",input:"0000000000000000"},{key:"a3a3a3a3b3b3b3b3",iv:"cdcdcdcdcdcdcdcd",input:"cccccccccccccccc"},{key:"deadbeefabbadead",iv:"a0da0da0da0da0da",input:"0102030405060708090a"},{key:"aabbccddeeff0011",iv:"fefefefefefefefe",input:"0102030405060708090a0102030405060708090a0102030405060708090a0102030405060708090a0102030405060607080a0102030405060708090a"}];t.forEach(function(t,r){it("should encrypt vector "+r,function(){var r=new Buffer(t.key,"hex"),n=new Buffer(t.iv,"hex"),i=new Buffer(t.input,"hex"),a=e.create({type:"encrypt",key:r,iv:n}),o=new Buffer(a.update(i).concat(a["final"]())),s=crypto.createCipheriv("des-cbc",r,n),u=Buffer.concat([s.update(i),s["final"]()]);assert.deepEqual(o,u);var l=e.create({type:"decrypt",key:r,iv:n});assert.deepEqual(new Buffer(l.update(o).concat(l["final"]())),i)})})})});