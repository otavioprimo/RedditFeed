var assert=require("assert"),xor=require("../"),xorInplace=require("../inplace"),fixtures=require("./fixtures");describe("xor",function(){fixtures.forEach(function(e){it("returns "+e.expected+" for "+e.a+"/"+e.b,function(){var t=new Buffer(e.a,"hex"),r=new Buffer(e.b,"hex"),n=xor(t,r);assert.equal(n.toString("hex"),e.expected),assert.equal(t.toString("hex"),e.a),assert.equal(r.toString("hex"),e.b)})})}),describe("xor/inplace",function(){fixtures.forEach(function(e){it("returns "+e.expected+" for "+e.a+"/"+e.b,function(){var t=new Buffer(e.a,"hex"),r=new Buffer(e.b,"hex"),n=xorInplace(t,r);assert.equal(n.toString("hex"),e.expected),assert.equal(t.toString("hex"),e.mutated||e.expected),assert.equal(r.toString("hex"),e.b)})})});